"" Source your .vimrc
"source ~/.vimrc

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc
" use fzf in vim
set rtp+=/usr/local/opt/fzf


set visualbell
set noerrorbell
set number
set relativenumber
set clipboard += unnamedplus
set clipboard += ideaput
set quickscope
let g:qs_primary_color = '#ff6666'
let g:qs_secondary_color = '#a2cd5a'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap <C-f> <C-f>zz
nnoremap <C-b> <C-b>zz
nnoremap * *zz
nnoremap # #zz
nnoremap <SPACE> <Nop>
let mapleader = " "
nnoremap <leader>t :action ActivateTerminalToolWindow<CR>
nnoremap <leader>d :action ToggleDistractionFreeMode<CR>
nnoremap <leader>f :action ResizeToolWindowDown<CR>
nnoremap <leader>c :action ReopenClosedTab<CR>
nnoremap <leader>b :action DecrementWindowWidth<CR>
nnoremap <leader>j :action DecrementWindowHeight<CR>
nnoremap <leader>l :action MoveEditorToOppositeTabGroup<CR>
nnoremap <leader>r :action MoveTabRight<CR>
nnoremap <leader>b :action ToggleLineBreakpoint<CR>
nnoremap <leader>a :action Annotate<CR>
nnoremap <leader>n :action ActivateProjectToolWindow<CR>
nnoremap <leader>h :action HideActiveWindow<CR>
nnoremap <leader>p :action PinActiveEditorTab<CR>
nnoremap <leader>r :action Vcs.RollbackChangedLines<CR>
nnoremap <leader>fg :action FindInPath<CR>
nnoremap <leader>o :action GotoFile<CR>
nnoremap <D-S-t> :action ReopenClosedTab<CR>
nnoremap <C-j> :action EditorScrollLeft<CR>
nnoremap <C-k> :action EditorScrollRight<CR>
nmap g; :action VcsShowNextChangeMarker<CR>
nmap g, :action VcsShowPrevChangeMarker<CR>
nnoremap gD :action GotoTypeDeclaration<CR>
nnoremap <leader>enter:action ImportModule<CR>

" next/prev tab
nnoremap <C-l> :tabn'x<CR>
nnoremap <C-h> :tabp'x<CR>
map <leader>s :vsp<CR>

" set sneak
nmap <a-s> <Plug>(sneak-s)
set NERDTree
map <c-c>   :NERDTreeToggle<CR>
map <c-n>   :NERDTreeClose<CR>

set ideastrictmode

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tommcdo/vim-exchange'
Plug 'vim-scripts/argtextobj.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'houl/repmo-vim'
"noremap <expr> h repmo#SelfKey('h', 'l')|sunmap h
"noremap <expr> l repmo#SelfKey('l', 'h')|sunmap l
" repeat the last [count]motion:
:map <expr> <Space> repmo#LastKey('')|sunmap <Space>
:map <expr> <BS>    repmo#LastRevKey('')|sunmap <BS>

" Define a custom text object for Kotlin functions
function! KotlinFunctionTextObject(type)
  if a:type == 'v'
    normal! V
  elseif a:type == 'o'
    normal! v
  endif
  execute "normal! ?fun\<CR>f{"
  normal! vi{
endfunction

" Map the custom text object to `af` (a function)
xnoremap af :<C-u>call KotlinFunctionTextObject('v')<CR>
onoremap af :<C-u>call KotlinFunctionTextObject('o')<CR>
